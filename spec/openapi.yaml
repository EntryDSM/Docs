openapi: '3.0.0'
info:
  version: '1.0.0'
  
  title: api.entrydsm.hs.kr # Replace with your API title
  # Keep it simple. Don't add "API" or version at the end of the string.

  termsOfService: 'https://entrydsm..hs.kr/terms/'
  contact:
    email: entrydsm@entrydsm.hs.kr
    url: 'https://www.facebook.com/entrydsm/'
  x-logo:
    url: 'https://i.ibb.co/JxqpcqB/New-Project.png'

  description: |
    [![Build Status](https://travis-ci.org/EntryDSM/Docs.svg?branch=master)](https://travis-ci.org/EntryDSM/Docs)
    
    This is EntryDSM API docs! You can develop services&frontend by reading this :)

tags:
  - name: Hermes
    description: Handles all EntryDSM user(admin, applicant) related functions on the EntryDSM platform
  - name: Louis-Vuitton
    description: LV is in charge of process of entrance application
  - name: Chanel
    description: EntryDSM auth service
  - name: Gucci
    description: EntryDSM QnA service
  - name: Rolex
    description: EntryDSM admin service
  - name: Yves-Saint-Laurent
    description: EntryDSM interview service
servers:
  - url: 'https://entrydsn.hs.kr/api/v1'
  
paths:
  /admin:
    post:
      tags:
        - Hermes
      summary: Create new admin - INTER CALL ONLY
      description: Create new admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - admin_id
                - admin_email
                - admin_name
                - admin_password
                - admin_type
              properties:
                admin_id:
                  type: string
                  example: entry2019root
                  description: admin id
                admin_email:
                  type: string
                  example: entry@entrydsm.hs.kr
                  description: admin email
                admin_name:
                  type: string
                  example: 연준모
                  description: admin name
                admin_password:
                  type: string
                  example: p@assword
                  description: admin password
                admin_type:
                  type: string
                  example: admin type
                  description: admin type, one of `ROOT`, `ADMINISTRATION`, `INTERVIEW`

      # security schemas applied to this operation
      security:
        - JWTAuthentication: []
      responses: # list of responses
        '201':
          description: Admin created  
        '400':
          description: Bad request, check your payload
        '401':
          description: Authentication failed
        '409':
          description: Admin with requested admin_id is already exists
  /admin/batch:
    get:
      tags: 
        - Hermes
      summary: Get multiple admins - INTER CALL ONLY
      description: Get multiple admins
      parameters: 
        - name: admin_id
          in: query
          description: admin id
          schema:
            type: string
        - name: admin_email
          in: query
          description: admin email
          schema:
            type: string
        - name: admin_name
          in: query
          description: admin name
          schema:
            type: string
        - name: admin_type
          in: query
          description: admin type, one of `ROOT`, `ADMINISTRATION`, `INTERVIEW`
          schema:
            type: string
            
      security: 
        - JWTAuthentication: []
        
      responses:
        '200':
          description: Query succeess
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    admin_id:
                      type: string
                      example: entry2019root
                    admin_email:
                      type: string
                      example: entry@entrydsm.hs.kr
                    admin_name:
                      type: string
                      example: 연준모
                    admin_type:
                      type: string
                      example: ROOT
                      description: one of `ROOT`, `ADMINISTRATION`, `INTERVIEW`
        '401':
          description: Authentication failed
  '/admin/{admin_id}':
    parameters:
      - name: admin_id
        in: path
        description: admin id
        required: true
        schema: 
          type: string
    get:
      tags:
        - Hermes
      summary: Get one admin - INTER CALL ONLY
      description: Get one admin
      
      security: 
        - JWTAuthentication: []
      
      responses:
        '200':
          description: Query success
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin_id:
                    type: string
                    example: entry2019root
                  admin_email:
                    type: string
                    example: entry@entrydsm.hs.kr
                  admin_name:
                    type: string
                    example: 연준모
                  admin_type:
                    type: string
                    example: ROOT
                    description: one of `ROOT`, `ADMINISTRATION`,`INTERVIEW`
        '401':
          description: Authentication failed
        '404':
          description: Admin not found
    patch:
      tags:
        - Hermes
      summary: Patch one admin - INTER CALL ONLY
      description: Patch one admin
      security: 
        - JWTAuthentication: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_email:
                  type: string
                  example: entry@entrydsm.hs.kr
                  description: admin email
                admin_name:
                  type: string
                  example: 연준모
                  description: admin name
                admin_password:
                  type: string
                  example: p@assword
                  description: admin password
                admin_type:
                  type: string
                  example: admin type
                  description: admin type, one of `ROOT`, `ADMINISTRATION`, `INTERVIEW`
      responses:
        '200':
          description: Patch success
        '401':
          description: Authentication failed
        '404': 
          description: Admin not found
    delete:
      tags: 
        - Hermes
      summary: Delete one admin - INTER CALL ONLY
      description: Delete one admin
      security: 
        - JWTAuthentication: []
      responses:
        '200':
          description: "Delete success"
        '401':
          description: "Authentication failed"
        '404':
          description: "Admin not found"
  '/sign-up':
    post:
      tags:
        - Chanel
      summary: Make a casual users, and verifying their email. - PUBLIC ONLY
      description: sign-up
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - email
                - password
              properties:
                email:
                  type: string
                  example: by09115@jaehoon.kim
                  description: user email
                password:
                  type: string
                  example: thisIsP@ssword
                  description: user password
      responses:
        '202':
          description: account has created
        '400':
          description: bad request
        '409':
          description: conflict
  '/sign-up/verify':
    get:
      tags: 
        - Chanel
      summary: Validate the token issued for email verification - PUBLIC ONLY
      description: (e.g. /sign-up/verify?code={{code}})
      parameters: 
        - name: code
          in: query
          description: validate code
          schema:
            type: string
      responses:
        '200':
          description: O.K.
        '400':
          description: incorrect validate code
  '/login':
    post:
      tags:
        - Chanel
      summary: Check user's info for Authentication. - PUBLIC ONLY
      description: log-in
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - email
                - password
              properties:
                email:
                  type: string
                  example: by09115@jaehoon.kim
                  description: user email
                password:
                  type: string
                  example: thisIsP@ssword
                  description: user password
      responses:
        '201':
          description: Login successed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "ThIsIs.TrUlY.AcCeSsToKeN"
                  refresh:
                    type: string
                    example: "ThIsIs.TrUlY.ReFrEsHtOkEn"
        '403':
          description: Bad request
  '/refresh':
    patch:
      tags:
        - Chanel
      summary: refresh the token - PUBLIC ONLY
      description: refresh the token
      parameters: 
        - name: 'X-Refresh-Token'
          in: header
          description: (e.g. "Bearer {token}")
          schema:
            type: string
      responses:
        '201':
          description: successfuly refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "{{ access token }}"
        '403':
          description: incorrect token
  '/logout':
    delete:
      tags:
        - Chanel
      summary: destroy the token
      description: destroy the token
      parameters: 
        - name: 'X-Refresh-Token'
          in: header
          description: (e.g. "Bearer {token}")
          schema:
            type: string
      responses:
        '202':
          description: Accepted
        '403':
          description: Bad request(incorrect token)
  '/service/token':
    post:
      tags:
        - Chanel
      summary: Create a new token
      description: Create service token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - email
                - password
              properties:
                email:
                  type: string
                  example: by09115@jaehoon.kim
                  description: user email
                password:
                  type: string
                  example: thisIsP@ssword
                  description: user password
      responses:
        '201':
          description: Login successed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "ThIsIs.TrUlY.AcCeSsToKeN"
                  refresh:
                    type: string
                    example: "ThIsIs.TrUlY.ReFrEsHtOkEn"
        '403':
          description: Bad request
    delete:
      tags:
        - Chanel
      summary: destroy the token
      description: 기존에 사용중이던 토큰 파기
      parameters: 
        - name: 'Authorization'
          in: header
          description: (e.g. "Bearer {token}")
          schema:
            type: string
      responses:
        '204':
          description: successfuly destroyed the token
        '403':
          description: incorrect token
    patch:
      tags:
        - Chanel
      summary: refresh the service token
      description: 토큰 재발급
      parameters: 
        - name: 'Authorization'
          in: header
          description: refresh token (e.g. "Bearer {token}")
          schema:
            type: string
      responses:
        '201':
          description: successfuly refreshed
        '403':
          description: incorrect token
components:
  securitySchemes:
    JWTAuthentication:
      type: apiKey
      in: header
      name: Authorization
